C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE GLCD
OBJECT MODULE PLACED IN glcd.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE glcd.c OMF2 BROWSE DEBUG

line level    source

   1          #include <reg52.h>
   2          #include <string.h>
   3          #include "glcd.h"
   4          
   5          void waiting(void){
   6   1              while(1){
   7   2                      RS=0;
   8   2                      RW=1;
   9   2                      En=0;
  10   2                      LCDdata=0xFF;
  11   2                      En=1;
  12   2                      if((LCDdata&0x80)==0) break;
  13   2              }
  14   1      }
  15          
  16          void lcd_write_command(unsigned char command){
  17   1              waiting();
  18   1              RS=0;
  19   1              RW=0;
  20   1              LCDdata=command;
  21   1              En=1;
  22   1              En=0;
  23   1      }
  24          
  25          void lcd_write_data(unsigned char RWdata){
  26   1              waiting();
  27   1              RS=1;
  28   1              RW=0;
  29   1              LCDdata=RWdata;
  30   1              En=1;
  31   1              En=0;
  32   1      }
  33          
  34          unsigned char lcd_read_data(void){
  35   1              unsigned char Rdata;
  36   1              waiting();
  37   1              RS=1;
  38   1              RW=1;
  39   1              En=1;
  40   1              Rdata=P0;
  41   1              En=0;
  42   1              return Rdata;
  43   1      }
  44          
  45          void lcd_init(void){
  46   1              PSB=1;
  47   1              RET=1;
  48   1              lcd_write_command(BasicCommand);
  49   1              lcd_write_command(ClearScreen);
  50   1              lcd_write_command(AddrBackO);
  51   1              lcd_write_command(CurserOff);
  52   1              lcd_write_command(ClearScreen);
  53   1              lcd_write_command(CurserLeft);
  54   1      }
  55          
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 2   

  56          void display_string(unsigned char line,unsigned char *string){
  57   1      //Use the default command to display string. It can display chinese
  58   1      //line is the number of line. There are total 4 lines
  59   1      //string must be like this: unsigned char code string_1[]={"Test"}
  60   1      //Maxmum number of characters is 16.
  61   1          unsigned char  addr,i;
  62   1              unsigned char  maxnum=strlen(string);
  63   1          if(line==1)
  64   1            addr=0x80;
  65   1          else if(line==2)
  66   1            addr=0x90;
  67   1          else if(line==3)
  68   1            addr=0x88;
  69   1          else if(line==4)
  70   1                      addr=0x98;
  71   1          lcd_write_command(addr);
  72   1          for(i=0;i<maxnum;i++)
  73   1          {
  74   2                      lcd_write_data(*string++);
  75   2              } 
  76   1      }
  77          
  78          void first_page(void){
  79   1              unsigned char i,j;
  80   1              lcd_write_command(ClearScreen);
  81   1              lcd_write_command(ExteCommandOff);
  82   1              for(i=0;i<16;i++){
  83   2                      for(j=0;j<32;j++){
  84   3                              lcd_write_command(0x80|j);
  85   3                              lcd_write_command(i|0x80);
  86   3                              lcd_write_data(0x00);
  87   3                              lcd_write_data(0x00);   
  88   3                      }
  89   2              }
  90   1              lcd_write_command(ExteCommandOn);
  91   1              lcd_write_command(BasicCommand);
  92   1      }
  93          
  94          void set_dot(unsigned char x,unsigned char y){
  95   1              if(x>=0 && x<=127 && y>=0 && y<=63){
  96   2              //initial variables
  97   2              unsigned int k=0x8000;
  98   2              unsigned char highdata,lowdata;
  99   2              //Open external command and graphic display
 100   2              lcd_write_command(ExteCommandOn);
 101   2              //According to y, adjust x and y
 102   2              if(y>=32){
 103   3                      y=y-32;
 104   3                      x=x+128;
 105   3              }
 106   2              //according to x, get which bit will be setted.
 107   2              k=k>>x%16;
 108   2              //write x and y to prepare to read data
 109   2              lcd_write_command(0x80|y);
 110   2              lcd_write_command((x/16)|0x80);
 111   2              //read exist data and change them to new data.
 112   2              highdata=lcd_read_data();
 113   2              highdata=lcd_read_data()|k>>8;
 114   2              lowdata=lcd_read_data()|k;
 115   2              //write x and y to prepare to write data
 116   2              lcd_write_command(0x80|y);
 117   2              lcd_write_command((x/16)|0x80);
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 3   

 118   2              //write data
 119   2              lcd_write_data(highdata);
 120   2              lcd_write_data(lowdata);
 121   2              //go back to basic command
 122   2              lcd_write_command(BasicCommand);
 123   2              }
 124   1      }
 125          
 126          void draw_line(unsigned char x1,unsigned char y1,unsigned char x2,unsigned char y2){    
 127   1              char dx,dy;//Difference between x1 and x2 and difference between y1 and y2
 128   1              unsigned char x,y,temp;//x,y: location of pixel.  temp: temp value for exchange of x and y
 129   1              int e;//adjust whether should be increased
 130   1              bit k,j;//k: upper slope flag.  j: negative slope flag
 131   1              dx=x2-x1;
 132   1              dy=y2-y1;
 133   1              //if the line is not from high to low, change it.
 134   1              if((dx<=0 && dy<=0) || (dx>=0 && dy<=0)){
 135   2                      temp=x2;
 136   2                      x2=x1;
 137   2                      x1=temp;
 138   2                      temp=y2;
 139   2                      y2=y1;
 140   2                      y1=temp;
 141   2                      dx=x2-x1;
 142   2                      dy=y2-y1;
 143   2              }
 144   1              //if negative slope, change to positive and get flag
 145   1              if(dx<0){
 146   2                      temp=x2;
 147   2                      x2=x1;
 148   2                      x1=temp;
 149   2                      dx=x2-x1;
 150   2                      j=1;
 151   2              }else{
 152   2                      j=0;
 153   2              }
 154   1              //if upper slope, get flag
 155   1              if(dx>=dy){
 156   2                      k=1;    
 157   2              }else{
 158   2                      k=0;
 159   2              }
 160   1              //Different slope, different default e
 161   1              if(k){
 162   2                      e=-dx;
 163   2              }else{
 164   2                      e=-dy;
 165   2              }
 166   1              //first point
 167   1              x=x1;
 168   1              y=y1;
 169   1              //if has been finished final point, finish drawing.
 170   1              while(x<=x2 && y<=y2){
 171   2                      //if the original slope is negative slope, should  change points back
 172   2                      if(j){
 173   3                              set_dot(x1+x2-x,y);
 174   3                      }else{
 175   3                              set_dot(x,y);
 176   3                      }
 177   2                      //different slope, different change of e
 178   2                      if(k){
 179   3                              e=e+2*dy;
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 4   

 180   3                      }else{
 181   3                              e=e+2*dx;
 182   3                      }
 183   2                      //according to e, adjust whether should go upper
 184   2                      if(e<=0){
 185   3                              //different slope, different way to go upper
 186   3                              if(k){
 187   4                                      x++;
 188   4                              }else{
 189   4                                      y++;
 190   4                              }
 191   3                      }else{
 192   3                              x++;
 193   3                              y++;
 194   3                              //different slope, different change of e
 195   3                              if(k){
 196   4                                      e=e-2*dx;
 197   4                              }else{
 198   4                                      e=e-2*dy;
 199   4                              }
 200   3                      }
 201   2              }
 202   1      }
 203          
 204          void draw_box(unsigned char x,unsigned char y,unsigned char num_x,unsigned char num_y,bit fill){
 205   1              //x: right upper coner x
 206   1              //y: right upper coner y
 207   1              //num_x: number of pixels in x
 208   1              //num_y: number os pixels in y
 209   1              //fill: fill or not
 210   1              if(fill){
 211   2                      unsigned char i;
 212   2                      for(i=y;i<y+num_y;i++){
 213   3                              draw_line(x,i,x+num_x-1,i);
 214   3                      }
 215   2              }else{
 216   2                      draw_line(x,y,x,y+num_y-1);
 217   2                      draw_line(x,y,x+num_x-1,y);
 218   2                      draw_line(x+num_x-1,y+num_y-1,x+num_x-1,y);
 219   2                      draw_line(x+num_x-1,y+num_y-1,x,y+num_y-1);
 220   2              }
 221   1      }
 222          
 223          void draw_frame(void){
 224   1              draw_box(0,0,128,64,0);
 225   1      }
 226          
 227          void draw_circle(unsigned char x,unsigned char y,unsigned char r,bit fill){
 228   1              //x: x of center
 229   1              //y: y of center
 230   1              //r: radius (number of pixels in radius)
 231   1              //fill: fill or not
 232   1              unsigned char a,b;
 233   1              char d;
 234   1              unsigned char i;
 235   1              //initial first point
 236   1              a=0;
 237   1              b=r-1;
 238   1              //initial distance
 239   1              d=1-r;
 240   1              while(a<=b){//Adjust if circle has been finished
 241   2                      //draw circle using a point of 1/8 circle to draw 8 points in all circle
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 5   

 242   2                      if(fill){
 243   3                              for(i=a+x;i>=x-a;i--){
 244   4                                      set_dot(i,b+y);
 245   4                                      set_dot(i,y-b);
 246   4                              }
 247   3                              for(i=b+x;i>=x-b;i--){
 248   4                                      set_dot(i,a+y);
 249   4                                      set_dot(i,y-a);
 250   4                              }
 251   3                      }else{
 252   3                              set_dot(a+x,b+y);
 253   3                              set_dot(a+x,y-b);
 254   3                              set_dot(x-a,b+y);
 255   3                              set_dot(x-a,y-b);
 256   3                              set_dot(b+x,a+y);
 257   3                              set_dot(b+x,y-a);
 258   3                              set_dot(x-b,a+y);
 259   3                              set_dot(x-b,y-a);       
 260   3                      }
 261   2                      //use distance to adjust next point.
 262   2                      if(d<0){
 263   3                              d+=2*a+3;
 264   3                      }else{
 265   3                              d+=2*(a-b)+5;
 266   3                              b--;
 267   3                      }
 268   2                      a++;
 269   2              }
 270   1      }
 271          
 272          void draw_8bits(unsigned char x,unsigned char y,unsigned char data8bit){
 273   1              unsigned char i=8;
 274   1              bit dot;
 275   1              while(i>0){
 276   2                      i--;
 277   2                      dot=0x01&(data8bit>>i);
 278   2                      if(dot){
 279   3                              set_dot(x,y);
 280   3                      }
 281   2                      x++;
 282   2              }
 283   1      }
 284          
 285          void draw_8bits90(unsigned char x,unsigned char y,unsigned char data8bit){
 286   1              unsigned char i=8;
 287   1              bit dot;
 288   1              while(i>0){
 289   2                      i--;
 290   2                      dot=0x01&(data8bit>>i);
 291   2                      if(dot){
 292   3                              set_dot(x,y);
 293   3                      }
 294   2                      y++;
 295   2              }
 296   1      }
 297          
 298          void draw_8bits180(unsigned char x,unsigned char y,unsigned char data8bit){
 299   1              unsigned char i=8;
 300   1              bit dot;
 301   1              while(i>0){
 302   2                      i--;
 303   2                      dot=0x01&(data8bit>>i);
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 6   

 304   2                      if(dot){
 305   3                              set_dot(x,y);
 306   3                      }
 307   2                      x--;
 308   2              }
 309   1      }
 310          
 311          void draw_8bits270(unsigned char x,unsigned char y,unsigned char data8bit){
 312   1              unsigned char i=8;
 313   1              bit dot;
 314   1              while(i>0){
 315   2                      i--;
 316   2                      dot=0x01&(data8bit>>i);
 317   2                      if(dot){
 318   3                              set_dot(x,y);
 319   3                      }
 320   2                      y--;
 321   2              }
 322   1      }
 323          
 324          void draw_picture(unsigned char x,unsigned char y,unsigned char x_l,unsigned char y_l,unsigned char *pictu
             -re){
 325   1              //x_l and y_l must be multiples of 8. They are the picture's length(in x of original system) and width(in
             - y of original system).
 326   1              unsigned char i=0;
 327   1              unsigned char j=0;
 328   1              int num=0;
 329   1              x_l=x_l/8;
 330   1              while(j<y_l){
 331   2                      j++;
 332   2                      while(i<x_l){
 333   3                              i++;
 334   3                              draw_8bits(x,y,picture[num]);
 335   3                              num++;
 336   3                              x+=8;
 337   3      
 338   3                      }
 339   2                      x-=8*i;
 340   2                      i=0;
 341   2                      y++;
 342   2              }
 343   1      }
 344          
 345          void draw_picture90(unsigned char x,unsigned char y,unsigned char x_l,unsigned char y_l,unsigned char *pic
             -ture){
 346   1              //x_l and y_l must be multiples of 8. They are the picture's length(in x of original system) and width(in
             - y of original system).
 347   1              unsigned char i=0;
 348   1              unsigned char j=0;
 349   1              int num=0;
 350   1              x_l=x_l/8;
 351   1              while(j<y_l){
 352   2                      j++;
 353   2                      while(i<x_l){
 354   3                              i++;
 355   3                              draw_8bits90(x,y,picture[num]);
 356   3                              num++;
 357   3                              y+=8;
 358   3      
 359   3                      }
 360   2                      y-=8*i;
 361   2                      i=0;
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 7   

 362   2                      x--;
 363   2              }
 364   1      }
 365          
 366          void draw_picture180(unsigned char x,unsigned char y,unsigned char x_l,unsigned char y_l,unsigned char *pi
             -cture){
 367   1              //x_l and y_l must be multiples of 8. They are the picture's length(in x of original system) and width(in
             - y of original system).
 368   1              unsigned char i=0;
 369   1              unsigned char j=0;
 370   1              int num=0;
 371   1              x_l=x_l/8;
 372   1              while(j<y_l){
 373   2                      j++;
 374   2                      while(i<x_l){
 375   3                              i++;
 376   3                              draw_8bits180(x,y,picture[num]);
 377   3                              num++;
 378   3                              x-=8;
 379   3      
 380   3                      }
 381   2                      x+=8*i;
 382   2                      i=0;
 383   2                      y--;
 384   2              }
 385   1      }
 386          
 387          void draw_picture270(unsigned char x,unsigned char y,unsigned char x_l,unsigned char y_l,unsigned char *pi
             -cture){
 388   1              //x_l and y_l must be multiples of 8. They are the picture's length(in x of original system) and width(in
             - y of original system).
 389   1              unsigned char i=0;
 390   1              unsigned char j=0;
 391   1              int num=0;
 392   1              x_l=x_l/8;
 393   1              while(j<y_l){
 394   2                      j++;
 395   2                      while(i<x_l){
 396   3                              i++;
 397   3                              draw_8bits270(x,y,picture[num]);
 398   3                              num++;
 399   3                              y-=8;
 400   3      
 401   3                      }
 402   2                      y+=8*i;
 403   2                      i=0;
 404   2                      x++;
 405   2              }
 406   1      }
 407          
 408          void display_string_58(unsigned char x,unsigned char y,unsigned char *string, unsigned int degree, unsigne
             -d char space){
 409   1              //degree: 0, 90, 180, 270
 410   1              unsigned char code ASCII58[] =              // ASCII
 411   1              {
 412   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // - -
 413   1      
 414   1              0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00, // -!-
 415   1      
 416   1              0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00, // -"-
 417   1      
 418   1              0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00, // -#-
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 8   

 419   1      
 420   1              0x20,0x78,0xC0,0x70,0x28,0xF0,0x20,0x00, // -$-
 421   1      
 422   1              0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00, // -%-
 423   1      
 424   1              0x40,0xA0,0xA0,0x40,0xA8,0x90,0x68,0x00, // -&-
 425   1      
 426   1              0x30,0x20,0x40,0x00,0x00,0x00,0x00,0x00, // -'-
 427   1      
 428   1              0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00, // -(-
 429   1      
 430   1              0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00, // -)-
 431   1      
 432   1              0x20,0xA8,0x70,0x20,0x70,0xA8,0x20,0x00, // -*-
 433   1      
 434   1              0x20,0x20,0x20,0xF8,0x20,0x20,0x20,0x00, // -+-
 435   1      
 436   1              0x00,0x00,0x00,0x00,0x60,0x40,0x80,0x00, // -,-
 437   1      
 438   1              0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00, // ---
 439   1      
 440   1              0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00, // -.-
 441   1      
 442   1              0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00, // -/-
 443   1      
 444   1              0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00, // -0-
 445   1      
 446   1              0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00, // -1-
 447   1      
 448   1              0x70,0x88,0x08,0x30,0x40,0x80,0xF8,0x00, // -2-
 449   1      
 450   1              0xF8,0x08,0x10,0x30,0x08,0x88,0x70,0x00, // -3-
 451   1      
 452   1              0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00, // -4-
 453   1      
 454   1              0xF8,0x80,0xF0,0x08,0x08,0x88,0x70,0x00, // -5-
 455   1      
 456   1              0x38,0x40,0x80,0xF0,0x88,0x88,0x70,0x00, // -6-
 457   1      
 458   1              0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00, // -7-
 459   1      
 460   1              0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00, // -8-
 461   1      
 462   1              0x70,0x88,0x88,0x78,0x08,0x10,0xE0,0x00, // -9-
 463   1      
 464   1              0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x00, // -:-
 465   1      
 466   1              0x00,0x60,0x60,0x00,0x60,0x60,0x80,0x00, // -;-
 467   1      
 468   1              0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00, // -<-
 469   1      
 470   1              0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00, // -=-
 471   1      
 472   1              0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00, // ->-
 473   1      
 474   1              0x70,0x88,0x10,0x20,0x20,0x00,0x20,0x00, // -?-
 475   1      
 476   1              0x70,0x88,0xB8,0xA8,0xB8,0x80,0x78,0x00, // -@-
 477   1      
 478   1              0x20,0x50,0x88,0x88,0xF8,0x88,0x88,0x00, // -A-
 479   1      
 480   1              0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00, // -B-
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 9   

 481   1      
 482   1              0x70,0x88,0x80,0x80,0x80,0x88,0x70,0x00, // -C-
 483   1      
 484   1              0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00, // -D-
 485   1      
 486   1              0xF8,0x80,0x80,0xF0,0x80,0x80,0xF8,0x00, // -E-
 487   1      
 488   1              0xF8,0x80,0x80,0xF0,0x80,0x80,0x80,0x00, // -F-
 489   1      
 490   1              0x70,0x88,0x80,0x80,0xB8,0x88,0x78,0x00, // -G-
 491   1      
 492   1              0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00, // -H-
 493   1      
 494   1              0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00, // -I-
 495   1      
 496   1              0x38,0x10,0x10,0x10,0x10,0x90,0x60,0x00, // -J-
 497   1      
 498   1              0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00, // -K-
 499   1      
 500   1              0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00, // -L-
 501   1      
 502   1              0x88,0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00, // -M-
 503   1      
 504   1              0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00, // -N-
 505   1      
 506   1              0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00, // -O-
 507   1      
 508   1              0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00, // -P-
 509   1      
 510   1              0x70,0x88,0x88,0x88,0xA8,0x90,0x68,0x00, // -Q-
 511   1      
 512   1              0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00, // -R-
 513   1      
 514   1              0x70,0x88,0x80,0x70,0x08,0x88,0x70,0x00, // -S-
 515   1      
 516   1              0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00, // -T-
 517   1      
 518   1              0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00, // -U-
 519   1      
 520   1              0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00, // -V-
 521   1      
 522   1              0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00, // -W-
 523   1      
 524   1              0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00, // -X-
 525   1      
 526   1              0x88,0x88,0x50,0x20,0x20,0x20,0x20,0x00, // -Y-
 527   1      
 528   1              0xF8,0x08,0x10,0x20,0x40,0x80,0xF8,0x00, // -Z-
 529   1      
 530   1              0xF0,0xC0,0xC0,0xC0,0xC0,0xC0,0xF0,0x00, // -[-
 531   1      
 532   1              0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00, // -\-
 533   1      
 534   1              0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00, // -]-
 535   1      
 536   1              0x20,0x70,0xA8,0x20,0x20,0x20,0x20,0x00, // -^-
 537   1      
 538   1              0x00,0x20,0x40,0xF8,0x40,0x20,0x00,0x00, // -_-
 539   1      
 540   1              0x20,0x10,0x08,0x00,0x00,0x00,0x00,0x00, // -`-
 541   1      
 542   1              0x00,0x00,0xE0,0x10,0x70,0x90,0x68,0x00, // -a-
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 10  

 543   1      
 544   1              0x80,0x80,0xB0,0xC8,0x88,0xC8,0xB0,0x00, // -b-
 545   1      
 546   1              0x00,0x00,0x70,0x88,0x80,0x80,0x70,0x00, // -c-
 547   1      
 548   1              0x08,0x08,0x68,0x98,0x88,0x98,0x68,0x00, // -d-
 549   1      
 550   1              0x00,0x00,0x70,0x88,0xF0,0x80,0x70,0x00, // -e-
 551   1      
 552   1              0x30,0x48,0x40,0xF0,0x40,0x40,0x40,0x00, // -f-
 553   1      
 554   1              0x00,0x00,0x70,0x88,0x88,0x78,0x08,0xF0, // -g-
 555   1      
 556   1              0x80,0x80,0xB0,0xC8,0x88,0x88,0x88,0x00, // -h-
 557   1      
 558   1              0x20,0x00,0x00,0x20,0x20,0x20,0x20,0x00, // -i-
 559   1      
 560   1              0x10,0x00,0x00,0x30,0x10,0x10,0x10,0x60, // -j-
 561   1      
 562   1              0x80,0x80,0x90,0xA0,0xC0,0xA0,0x98,0x00, // -k-
 563   1      
 564   1              0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00, // -l-
 565   1      
 566   1              0x00,0x00,0x50,0xA8,0xA8,0xA8,0xA8,0x00, // -m-
 567   1      
 568   1              0x00,0x00,0xB0,0x48,0x48,0x48,0x48,0x00, // -n-
 569   1      
 570   1              0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00, // -o-
 571   1      
 572   1              0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80, // -p-
 573   1      
 574   1              0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x08, // -q-
 575   1      
 576   1              0x00,0x00,0xB0,0x48,0x40,0x40,0x40,0x00, // -r-
 577   1      
 578   1              0x00,0x00,0x78,0x80,0x70,0x08,0xF0,0x00, // -s-
 579   1      
 580   1              0x40,0x40,0xF8,0x40,0x40,0x48,0x30,0x00, // -t-
 581   1      
 582   1              0x00,0x00,0x90,0x90,0x90,0x90,0x68,0x00, // -u-
 583   1      
 584   1              0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00, // -v-
 585   1      
 586   1              0x00,0x00,0xA8,0xA8,0xA8,0xA8,0x50,0x00, // -w-
 587   1      
 588   1              0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00, // -x-
 589   1      
 590   1              0x00,0x00,0x88,0x88,0x98,0x68,0x08,0xF0, // -y-
 591   1      
 592   1              0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00, // -z-
 593   1      
 594   1              0x20,0x40,0x40,0x80,0x40,0x40,0x20,0x00, // -{-
 595   1      
 596   1              0x20,0x20,0x20,0x00,0x20,0x20,0x20,0x00, // -|-
 597   1      
 598   1              0x20,0x10,0x10,0x08,0x10,0x10,0x20,0x00, // -}-
 599   1      
 600   1              0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00
 601   1              };
 602   1              unsigned int i;
 603   1              unsigned int maxnum=strlen(string);
 604   1              unsigned int num;
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 11  

 605   1              unsigned char m,n;
 606   1              unsigned char x_l=1;
 607   1              unsigned char y_l=8;
 608   1              unsigned char b=y;
 609   1              unsigned char a=x;
 610   1              if(degree==0){
 611   2                      for(i=0;i<maxnum;i++){
 612   3                              x=a+(5+space)*i;
 613   3                              y=b;
 614   3                              num=(string[i]-32)*8;
 615   3                              //
 616   3                              m=0;
 617   3                              n=0;
 618   3                              while(n<y_l){
 619   4                                      n++;
 620   4                                      while(m<x_l){
 621   5                                              m++;
 622   5                                              draw_8bits(x,y,ASCII58[num]);
 623   5                                              num++;
 624   5                                              x+=8;
 625   5      
 626   5                                      }
 627   4                                      x-=8*m;
 628   4                                      m=0;
 629   4                                      y++;
 630   4                              }
 631   3                      }
 632   2              }
 633   1              else if(degree==90){
 634   2                      for(i=0;i<maxnum;i++){
 635   3                              x=a;
 636   3                              y=b+(5+space)*i;
 637   3                              num=(string[i]-32)*8;
 638   3                              //
 639   3                              m=0;
 640   3                              n=0;
 641   3                              while(n<y_l){
 642   4                                      n++;
 643   4                                      while(m<x_l){
 644   5                                              m++;
 645   5                                              draw_8bits90(x,y,ASCII58[num]);
 646   5                                              num++;
 647   5                                              y+=8;
 648   5      
 649   5                                      }
 650   4                                      y-=8*m;
 651   4                                      m=0;
 652   4                                      x--;
 653   4                              }
 654   3                      }
 655   2              }else if(degree==180){
 656   2                      for(i=0;i<maxnum;i++){
 657   3                              x=a-(5+space)*i;
 658   3                              y=b;
 659   3                              num=(string[i]-32)*8;
 660   3                              //
 661   3                              m=0;
 662   3                              n=0;
 663   3                              while(n<y_l){
 664   4                                      n++;
 665   4                                      while(m<x_l){
 666   5                                              m++;
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 12  

 667   5                                              draw_8bits180(x,y,ASCII58[num]);
 668   5                                              num++;
 669   5                                              x-=8;
 670   5      
 671   5                                      }
 672   4                                      x+=8*m;
 673   4                                      m=0;
 674   4                                      y--;
 675   4                              }
 676   3                      }
 677   2              }else if(degree==270){
 678   2                      for(i=0;i<maxnum;i++){
 679   3                              x=a;
 680   3                              y=b-(5+space)*i;
 681   3                              num=(string[i]-32)*8;
 682   3                              //
 683   3                              m=0;
 684   3                              n=0;
 685   3                              while(n<y_l){
 686   4                                      n++;
 687   4                                      while(m<x_l){
 688   5                                              m++;
 689   5                                              draw_8bits270(x,y,ASCII58[num]);
 690   5                                              num++;
 691   5                                              y-=8;
 692   5      
 693   5                                      }
 694   4                                      y+=8*m;
 695   4                                      m=0;
 696   4                                      x++;
 697   4                              }
 698   3                      }
 699   2              }
 700   1      }
 701          
 702          void display_string_1224(unsigned char x,unsigned char y,unsigned char *string, unsigned int degree, unsig
             -ned char space){
 703   1              //degree: 0, 90, 180, 270
 704   1              unsigned char code ASCII1224[] =              // ASCII
 705   1      {
 706   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // - -
 707   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 708   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 709   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 710   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 711   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 712   1      
 713   1              0x00,0x00,0x02,0x00,0x07,0x00,0x07,0x00,  // -!-
 714   1              0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,
 715   1              0x07,0x00,0x07,0x00,0x02,0x00,0x02,0x00,
 716   1              0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
 717   1              0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
 718   1              0x07,0x00,0x07,0x00,0x02,0x00,0x00,0x00,
 719   1      
 720   1              0x00,0x00,0x00,0x00,0x39,0xC0,0x39,0xC0,  // -"-
 721   1              0x39,0xC0,0x10,0x80,0x10,0x80,0x10,0x80,
 722   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 723   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 724   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 725   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 726   1      
 727   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -#-
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 13  

 728   1              0x01,0x80,0x31,0x80,0x31,0x80,0x31,0xE0,
 729   1              0x3F,0x80,0xF1,0x80,0x31,0x80,0x31,0x80,
 730   1              0x31,0x80,0x31,0xE0,0x3F,0x80,0xF1,0x80,
 731   1              0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x80,
 732   1              0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 733   1      
 734   1              0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,  // -$-
 735   1              0x3F,0xC0,0x66,0x60,0xC6,0x30,0xC6,0x30,
 736   1              0xC6,0x00,0xC6,0x00,0x66,0x00,0x3E,0x00,
 737   1              0x0F,0x80,0x07,0xC0,0x06,0x60,0x06,0x30,
 738   1              0xC6,0x30,0xC6,0x30,0xC6,0x30,0x66,0x60,
 739   1              0x3F,0xC0,0x06,0x00,0x06,0x00,0x00,0x00,
 740   1      
 741   1              0x00,0x00,0x00,0x00,0x30,0x00,0x48,0x20,  // -%-
 742   1              0xCC,0x60,0xCC,0x40,0xCC,0xC0,0xCC,0x80,
 743   1              0xCD,0x80,0x4B,0x00,0x32,0x00,0x06,0x00,
 744   1              0x04,0x00,0x0C,0x00,0x09,0x80,0x1A,0x40,
 745   1              0x36,0x60,0x26,0x60,0x66,0x60,0x46,0x60,
 746   1              0xC6,0x60,0x82,0x40,0x01,0x80,0x00,0x00,
 747   1      
 748   1              0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,  // -&-
 749   1              0x42,0x00,0x42,0x00,0x42,0x00,0x64,0x00,
 750   1              0x28,0x00,0x30,0x00,0x38,0x00,0x48,0x00,
 751   1              0x4C,0x00,0xC4,0x00,0xC6,0x70,0xC3,0x20,
 752   1              0xC3,0x20,0xC1,0xC0,0xC0,0xC0,0xC1,0xC0,
 753   1              0x67,0x60,0x3C,0x30,0x00,0x00,0x00,0x00,
 754   1      
 755   1              0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,  // -'-
 756   1              0x07,0x00,0x07,0x00,0x02,0x00,0x02,0x00,
 757   1              0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 758   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 759   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 760   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 761   1      
 762   1              0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x80,  // -(-
 763   1              0x01,0x00,0x03,0x00,0x03,0x00,0x06,0x00,
 764   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 765   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 766   1              0x06,0x00,0x03,0x00,0x03,0x00,0x01,0x00,
 767   1              0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x20,
 768   1      
 769   1              0x40,0x00,0x20,0x00,0x10,0x00,0x18,0x00,  // -)-
 770   1              0x08,0x00,0x0C,0x00,0x0C,0x00,0x06,0x00,
 771   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 772   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 773   1              0x06,0x00,0x0C,0x00,0x0C,0x00,0x08,0x00,
 774   1              0x18,0x00,0x10,0x00,0x20,0x00,0x40,0x00,
 775   1      
 776   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -*-
 777   1              0x04,0x00,0x0E,0x00,0x0E,0x00,0xC4,0x60,
 778   1              0xE4,0xE0,0x64,0xC0,0x11,0x00,0x00,0x00,
 779   1              0x00,0x00,0x11,0x00,0x64,0xC0,0xE4,0xE0,
 780   1              0xC4,0x60,0x0E,0x00,0x0E,0x00,0x04,0x00,
 781   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 782   1      
 783   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -+-
 784   1              0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
 785   1              0x06,0x00,0x06,0x00,0x06,0x00,0x7F,0xE0,
 786   1              0x7F,0xE0,0x06,0x00,0x06,0x00,0x06,0x00,
 787   1              0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 788   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 789   1      
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 14  

 790   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -,-
 791   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 792   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 793   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 794   1              0x00,0x00,0x0C,0x00,0x1E,0x00,0x1E,0x00,
 795   1              0x0E,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,
 796   1      
 797   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // ---
 798   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 799   1              0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,
 800   1              0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
 801   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 802   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 803   1      
 804   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -.-
 805   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 806   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 807   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 808   1              0x00,0x00,0x00,0x00,0x0C,0x00,0x1E,0x00,
 809   1              0x1E,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,
 810   1      
 811   1              0x00,0x00,0x00,0x20,0x00,0x60,0x00,0x40,  // -/-
 812   1              0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x00,
 813   1              0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x00,
 814   1              0x0C,0x00,0x08,0x00,0x18,0x00,0x10,0x00,
 815   1              0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,
 816   1              0xC0,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
 817   1      
 818   1              0x00,0x00,0x00,0x00,0x0E,0x00,0x1B,0x00,  // -0-
 819   1              0x31,0x80,0x31,0x80,0x60,0xC0,0x60,0xC0,
 820   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
 821   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
 822   1              0x60,0xC0,0x60,0xC0,0x31,0x80,0x31,0x80,
 823   1              0x1B,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
 824   1      
 825   1              0x00,0x00,0x00,0x00,0x06,0x00,0x1E,0x00,  // -1-
 826   1              0x7E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 827   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 828   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 829   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
 830   1              0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,
 831   1      
 832   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x80,  // -2-
 833   1              0x60,0xC0,0xE0,0x60,0xE0,0x60,0x60,0x60,
 834   1              0x00,0x60,0x00,0xC0,0x00,0xC0,0x01,0x80,
 835   1              0x03,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,
 836   1              0x30,0x00,0x70,0x00,0x60,0x20,0xE0,0x20,
 837   1              0xFF,0xE0,0xFF,0xE0,0x00,0x00,0x00,0x00,
 838   1      
 839   1              0x00,0x00,0x00,0x00,0x0F,0x00,0x39,0xC0,  // -3-
 840   1              0x70,0xE0,0x70,0x60,0x30,0x60,0x00,0x60,
 841   1              0x00,0xC0,0x01,0x80,0x03,0x00,0x0E,0x00,
 842   1              0x03,0x80,0x00,0xC0,0x00,0x60,0x00,0x60,
 843   1              0x00,0x60,0x60,0x60,0xE0,0x60,0xE0,0xE0,
 844   1              0x71,0xC0,0x3F,0x00,0x00,0x00,0x00,0x00,
 845   1      
 846   1              0x00,0x00,0x00,0x00,0x01,0x80,0x03,0x80,  // -4-
 847   1              0x03,0x80,0x07,0x80,0x05,0x80,0x0D,0x80,
 848   1              0x09,0x80,0x19,0x80,0x11,0x80,0x31,0x80,
 849   1              0x21,0x80,0x61,0x80,0x41,0x80,0xC1,0x80,
 850   1              0xFF,0xF0,0x01,0x80,0x01,0x80,0x01,0x80,
 851   1              0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 15  

 852   1      
 853   1              0x00,0x00,0x00,0x00,0x7F,0xC0,0x7F,0xC0,  // -5-
 854   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
 855   1              0x60,0x00,0x67,0x00,0x69,0x80,0x70,0xC0,
 856   1              0x40,0xC0,0x00,0x60,0x00,0x60,0x00,0x60,
 857   1              0x00,0x60,0x60,0x60,0xE0,0xC0,0xE0,0xC0,
 858   1              0x71,0x80,0x3F,0x00,0x00,0x00,0x00,0x00,
 859   1      
 860   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x33,0x80,  // -6-
 861   1              0x61,0xC0,0x61,0xC0,0xC1,0x80,0xC0,0x00,
 862   1              0xC0,0x00,0xCF,0x00,0xD1,0x80,0xE0,0xC0,
 863   1              0xC0,0xC0,0xC0,0x60,0xC0,0x60,0xC0,0x60,
 864   1              0xC0,0x60,0xC0,0x60,0x60,0xC0,0x60,0xC0,
 865   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
 866   1      
 867   1              0x00,0x00,0x00,0x00,0x7F,0xE0,0xFF,0xE0,  // -7-
 868   1              0xC0,0x60,0x80,0x40,0x80,0xC0,0x00,0x80,
 869   1              0x01,0x80,0x01,0x00,0x03,0x00,0x03,0x00,
 870   1              0x06,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,
 871   1              0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,
 872   1              0x0C,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,
 873   1      
 874   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x80,  // -8-
 875   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
 876   1              0x31,0x80,0x1B,0x00,0x0E,0x00,0x1F,0x00,
 877   1              0x31,0x80,0x60,0xC0,0xC0,0x60,0xC0,0x60,
 878   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0x60,0xC0,
 879   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
 880   1      
 881   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x80,  // -9-
 882   1              0x60,0xC0,0x60,0xC0,0xC0,0x60,0xC0,0x60,
 883   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0x60,0x60,
 884   1              0x60,0xE0,0x31,0x60,0x1E,0x60,0x00,0x60,
 885   1              0x00,0x60,0x30,0x60,0x70,0xC0,0x70,0xC0,
 886   1              0x39,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
 887   1      
 888   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -:-
 889   1              0x00,0x00,0x00,0x00,0x06,0x00,0x0F,0x00,
 890   1              0x0F,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
 891   1              0x00,0x00,0x00,0x00,0x06,0x00,0x0F,0x00,
 892   1              0x0F,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
 893   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 894   1      
 895   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -;-
 896   1              0x00,0x00,0x00,0x00,0x06,0x00,0x0F,0x00,
 897   1              0x0F,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
 898   1              0x00,0x00,0x00,0x00,0x06,0x00,0x0F,0x00,
 899   1              0x0F,0x00,0x07,0x00,0x03,0x00,0x06,0x00,
 900   1              0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 901   1      
 902   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,  // -<-
 903   1              0x00,0xC0,0x01,0x80,0x03,0x00,0x06,0x00,
 904   1              0x0C,0x00,0x18,0x00,0x30,0x00,0x60,0x00,
 905   1              0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x00,
 906   1              0x0C,0x00,0x06,0x00,0x03,0x00,0x01,0x80,
 907   1              0x00,0xC0,0x00,0x60,0x00,0x00,0x00,0x00,
 908   1      
 909   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -=-
 910   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 911   1              0x7F,0xE0,0x7F,0xE0,0x00,0x00,0x00,0x00,
 912   1              0x00,0x00,0x00,0x00,0x7F,0xE0,0x7F,0xE0,
 913   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 16  

 914   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 915   1      
 916   1              0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,  // ->-
 917   1              0x60,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,
 918   1              0x06,0x00,0x03,0x00,0x01,0x80,0x00,0xC0,
 919   1              0x00,0x60,0x00,0xC0,0x01,0x80,0x03,0x00,
 920   1              0x06,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,
 921   1              0x60,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,
 922   1      
 923   1              0x00,0x00,0x00,0x00,0x0F,0x80,0x18,0xC0,  // -?-
 924   1              0x30,0x60,0x70,0x60,0x70,0x60,0x20,0x60,
 925   1              0x00,0xC0,0x00,0xC0,0x01,0x80,0x01,0x00,
 926   1              0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
 927   1              0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
 928   1              0x07,0x00,0x07,0x00,0x02,0x00,0x00,0x00,
 929   1      
 930   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x20,0x80,  // -@-
 931   1              0x40,0x40,0x80,0x20,0x8F,0x20,0x99,0xA0,
 932   1              0xB1,0xA0,0xB1,0xA0,0xB1,0xA0,0xB1,0xA0,
 933   1              0xB1,0xA0,0xB1,0xA0,0xB1,0xA0,0xBF,0xA0,
 934   1              0x9C,0xC0,0x80,0x00,0x80,0x00,0x40,0x20,
 935   1              0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00,
 936   1      
 937   1              0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,  // -A-
 938   1              0x0B,0x00,0x0B,0x00,0x09,0x00,0x09,0x00,
 939   1              0x19,0x80,0x19,0x80,0x10,0x80,0x10,0x80,
 940   1              0x30,0xC0,0x30,0xC0,0x3F,0xC0,0x30,0xC0,
 941   1              0x20,0x40,0x60,0x60,0x60,0x60,0x60,0x60,
 942   1              0x60,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,
 943   1      
 944   1              0x00,0x00,0x00,0x00,0xFE,0x00,0x63,0x00,  // -B-
 945   1              0x61,0x80,0x60,0xC0,0x60,0xC0,0x60,0xC0,
 946   1              0x60,0xC0,0x61,0x80,0x63,0x00,0x7E,0x00,
 947   1              0x63,0x80,0x60,0xC0,0x60,0xC0,0x60,0x60,
 948   1              0x60,0x60,0x60,0x60,0x60,0xC0,0x60,0xC0,
 949   1              0x61,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,
 950   1      
 951   1              0x00,0x00,0x00,0x00,0x1F,0x20,0x31,0xE0,  // -C-
 952   1              0x60,0xE0,0x60,0x60,0xC0,0x20,0xC0,0x00,
 953   1              0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,
 954   1              0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,
 955   1              0xC0,0x00,0xC0,0x60,0x60,0x60,0x60,0xC0,
 956   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
 957   1      
 958   1              0x00,0x00,0x00,0x00,0xFE,0x00,0x63,0x00,  // -D-
 959   1              0x61,0x80,0x60,0xC0,0x60,0xC0,0x60,0x60,
 960   1              0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
 961   1              0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
 962   1              0x60,0x60,0x60,0xC0,0x60,0xC0,0x61,0x80,
 963   1              0x63,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,
 964   1      
 965   1              0x00,0x00,0x00,0x00,0xFF,0xE0,0x60,0xE0,  // -E-
 966   1              0x60,0x60,0x60,0x20,0x60,0x20,0x60,0x00,
 967   1              0x61,0x00,0x61,0x00,0x63,0x00,0x7F,0x00,
 968   1              0x63,0x00,0x61,0x00,0x61,0x00,0x60,0x00,
 969   1              0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x60,
 970   1              0x60,0xE0,0xFF,0xE0,0x00,0x00,0x00,0x00,
 971   1      
 972   1              0x00,0x00,0x00,0x00,0xFF,0xE0,0x60,0xE0,  // -F-
 973   1              0x60,0x60,0x60,0x20,0x60,0x20,0x60,0x00,
 974   1              0x61,0x00,0x61,0x00,0x63,0x00,0x7F,0x00,
 975   1              0x63,0x00,0x61,0x00,0x61,0x00,0x60,0x00,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 17  

 976   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
 977   1              0x60,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,
 978   1      
 979   1              0x00,0x00,0x00,0x00,0x1E,0x40,0x33,0xC0,  // -G-
 980   1              0x60,0xC0,0x60,0x40,0xC0,0x40,0xC0,0x00,
 981   1              0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC1,0xE0,
 982   1              0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
 983   1              0xC0,0xC0,0xC0,0xC0,0x61,0xC0,0x63,0xC0,
 984   1              0x36,0xC0,0x1C,0xC0,0x00,0x00,0x00,0x00,
 985   1      
 986   1              0x00,0x00,0x00,0x00,0xF1,0xE0,0x60,0xC0,  // -H-
 987   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
 988   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x7F,0xC0,
 989   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
 990   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
 991   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
 992   1      
 993   1              0x00,0x00,0x00,0x00,0x1F,0xE0,0x03,0x00,  // -I-
 994   1              0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,
 995   1              0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,
 996   1              0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,
 997   1              0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,
 998   1              0x03,0x00,0x1F,0xE0,0x00,0x00,0x00,0x00,
 999   1      
1000   1              0x00,0x00,0x00,0x00,0x07,0xE0,0x01,0x80,  // -J-
1001   1              0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
1002   1              0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
1003   1              0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
1004   1              0x61,0x80,0xF1,0x80,0xE1,0x80,0xC1,0x80,
1005   1              0x67,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,
1006   1      
1007   1              0x00,0x00,0x00,0x00,0xF3,0xE0,0x61,0x80,  // -K-
1008   1              0x61,0x80,0x63,0x00,0x63,0x00,0x66,0x00,
1009   1              0x66,0x00,0x6C,0x00,0x6C,0x00,0x7C,0x00,
1010   1              0x7C,0x00,0x76,0x00,0x76,0x00,0x63,0x00,
1011   1              0x63,0x00,0x61,0x80,0x61,0x80,0x60,0xC0,
1012   1              0x60,0xC0,0xF1,0xF0,0x00,0x00,0x00,0x00,
1013   1      
1014   1              0x00,0x00,0x00,0x00,0xF0,0x00,0x60,0x00,  // -L-
1015   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1016   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1017   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1018   1              0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x60,
1019   1              0x60,0xE0,0xFF,0xE0,0x00,0x00,0x00,0x00,
1020   1      
1021   1              0x00,0x00,0x00,0x00,0xE0,0x70,0x60,0x60,  // -M-
1022   1              0x60,0x60,0x60,0x60,0x70,0xE0,0x70,0xE0,
1023   1              0x70,0xE0,0x70,0xE0,0x79,0xE0,0x69,0x60,
1024   1              0x69,0x60,0x6F,0x60,0x66,0x60,0x66,0x60,
1025   1              0x66,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
1026   1              0x60,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,
1027   1      
1028   1              0x00,0x00,0x00,0x00,0xE1,0xE0,0x60,0xC0,  // -N-
1029   1              0x60,0xC0,0x70,0xC0,0x70,0xC0,0x70,0xC0,
1030   1              0x78,0xC0,0x68,0xC0,0x6C,0xC0,0x64,0xC0,
1031   1              0x66,0xC0,0x62,0xC0,0x63,0xC0,0x61,0xC0,
1032   1              0x61,0xC0,0x61,0xC0,0x60,0xC0,0x60,0xC0,
1033   1              0x60,0x40,0xF0,0x40,0x00,0x00,0x00,0x00,
1034   1      
1035   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x80,  // -O-
1036   1              0x60,0xC0,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1037   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 18  

1038   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1039   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0x60,0xC0,
1040   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
1041   1      
1042   1              0x00,0x00,0x00,0x00,0xFE,0x00,0x63,0x80,  // -P-
1043   1              0x60,0xC0,0x60,0xC0,0x60,0x60,0x60,0x60,
1044   1              0x60,0x60,0x60,0xC0,0x60,0xC0,0x63,0x80,
1045   1              0x7E,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1046   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1047   1              0x60,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,
1048   1      
1049   1              0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x80,  // -Q-
1050   1              0x60,0xC0,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1051   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1052   1              0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1053   1              0xC0,0x60,0xCC,0x60,0xC6,0x60,0x63,0x60,
1054   1              0x31,0xC0,0x1E,0xC0,0x00,0x70,0x00,0x00,
1055   1      
1056   1              0x00,0x00,0x00,0x00,0xFE,0x00,0x63,0x80,  // -R-
1057   1              0x61,0x80,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1058   1              0x60,0xC0,0x61,0x80,0x63,0x80,0x7E,0x00,
1059   1              0x6C,0x00,0x6C,0x00,0x66,0x00,0x66,0x00,
1060   1              0x63,0x00,0x63,0x00,0x61,0x80,0x61,0x80,
1061   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
1062   1      
1063   1              0x00,0x00,0x00,0x00,0x1E,0x40,0x73,0xC0,  // -S-
1064   1              0xC1,0xC0,0xC0,0xC0,0xC0,0x40,0xE0,0x00,
1065   1              0x70,0x00,0x38,0x00,0x1C,0x00,0x0E,0x00,
1066   1              0x07,0x00,0x03,0x80,0x01,0xC0,0x00,0xE0,
1067   1              0x80,0x60,0xC0,0x60,0xE0,0x60,0xF0,0xC0,
1068   1              0xD9,0x80,0x8F,0x00,0x00,0x00,0x00,0x00,
1069   1      
1070   1              0x00,0x00,0x00,0x00,0xFF,0xF0,0xE6,0x70,  // -T-
1071   1              0xC6,0x30,0x86,0x10,0x86,0x10,0x06,0x00,
1072   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1073   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1074   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1075   1              0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,
1076   1      
1077   1              0x00,0x00,0x00,0x00,0xF1,0xE0,0x60,0xC0,  // -U-
1078   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1079   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1080   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1081   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1082   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
1083   1      
1084   1              0x00,0x00,0x00,0x00,0xF1,0xE0,0x60,0xC0,  // -V-
1085   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1086   1              0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x80,
1087   1              0x31,0x80,0x31,0x80,0x1B,0x00,0x1B,0x00,
1088   1              0x1B,0x00,0x1B,0x00,0x0E,0x00,0x0E,0x00,
1089   1              0x0E,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
1090   1      
1091   1              0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x60,  // -W-
1092   1              0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
1093   1              0x60,0x60,0x60,0x60,0x26,0x40,0x26,0x40,
1094   1              0x26,0x40,0x26,0x40,0x26,0x40,0x36,0xC0,
1095   1              0x36,0xC0,0x36,0xC0,0x19,0x80,0x19,0x80,
1096   1              0x19,0x80,0x19,0x80,0x00,0x00,0x00,0x00,
1097   1      
1098   1              0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x60,  // -X-
1099   1              0x60,0x60,0x30,0xC0,0x30,0xC0,0x19,0x80,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 19  

1100   1              0x19,0x80,0x0F,0x00,0x0F,0x00,0x06,0x00,
1101   1              0x06,0x00,0x0F,0x00,0x0F,0x00,0x19,0x80,
1102   1              0x19,0x80,0x30,0xC0,0x30,0xC0,0x60,0x60,
1103   1              0x60,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,
1104   1      
1105   1              0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x60,  // -Y-
1106   1              0x60,0x60,0x30,0xC0,0x30,0xC0,0x30,0xC0,
1107   1              0x19,0x80,0x19,0x80,0x19,0x80,0x0F,0x00,
1108   1              0x0F,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1109   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1110   1              0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,
1111   1      
1112   1              0x00,0x00,0x00,0x00,0xFF,0xC0,0xE0,0xC0,  // -Z-
1113   1              0xC1,0xC0,0x81,0x80,0x83,0x00,0x03,0x00,
1114   1              0x06,0x00,0x06,0x00,0x0C,0x00,0x0C,0x00,
1115   1              0x18,0x00,0x18,0x00,0x30,0x00,0x30,0x00,
1116   1              0x60,0x00,0x60,0x20,0xC0,0x20,0xC0,0x60,
1117   1              0xC0,0xE0,0xFF,0xE0,0x00,0x00,0x00,0x00,
1118   1      
1119   1              0x07,0xE0,0x04,0x00,0x04,0x00,0x04,0x00,  // -[-
1120   1              0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,
1121   1              0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,
1122   1              0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,
1123   1              0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,
1124   1              0x04,0x00,0x04,0x00,0x04,0x00,0x07,0xE0,
1125   1      
1126   1              0x00,0x00,0x80,0x00,0xC0,0x00,0x40,0x00,  // -\-
1127   1              0x60,0x00,0x20,0x00,0x30,0x00,0x10,0x00,
1128   1              0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,
1129   1              0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x00,
1130   1              0x01,0x80,0x00,0x80,0x00,0xC0,0x00,0x40,
1131   1              0x00,0x60,0x00,0x20,0x00,0x00,0x00,0x00,
1132   1      
1133   1              0x7E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,  // -]-
1134   1              0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
1135   1              0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
1136   1              0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
1137   1              0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
1138   1              0x02,0x00,0x02,0x00,0x02,0x00,0x7E,0x00,
1139   1      
1140   1              0x00,0x00,0x06,0x00,0x0F,0x00,0x19,0x80,  // -^-
1141   1              0x30,0xC0,0x60,0x60,0x40,0x20,0x00,0x00,
1142   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1143   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1144   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1145   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1146   1      
1147   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -_-
1148   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1149   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1150   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1151   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1152   1              0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,
1153   1      
1154   1              0x18,0x00,0x3C,0x00,0x0F,0x00,0x01,0xC0,  // -`-
1155   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1156   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1157   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1158   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1159   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1160   1      
1161   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -a-
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 20  

1162   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1163   1              0x00,0x00,0x3F,0x00,0x61,0x80,0xF0,0xC0,
1164   1              0x60,0xC0,0x00,0xC0,0x0F,0xC0,0x38,0xC0,
1165   1              0x60,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
1166   1              0xE3,0xC0,0x3E,0x60,0x00,0x00,0x00,0x00,
1167   1      
1168   1              0x00,0x00,0x00,0x00,0xE0,0x00,0x60,0x00,  // -b-
1169   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1170   1              0x60,0x00,0x6F,0x00,0x79,0x80,0x70,0xC0,
1171   1              0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,
1172   1              0x60,0x60,0x60,0x60,0x60,0xC0,0x70,0xC0,
1173   1              0x79,0x80,0xCF,0x00,0x00,0x00,0x00,0x00,
1174   1      
1175   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -c-
1176   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1177   1              0x00,0x00,0x1F,0x00,0x31,0xC0,0x60,0xE0,
1178   1              0x61,0xE0,0xC0,0xC0,0xC0,0x00,0xC0,0x00,
1179   1              0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x60,
1180   1              0x30,0xC0,0x1F,0x80,0x00,0x00,0x00,0x00,
1181   1      
1182   1              0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x60,  // -d-
1183   1              0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,
1184   1              0x00,0x60,0x1F,0x60,0x31,0xE0,0x60,0xE0,
1185   1              0x60,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1186   1              0xC0,0x60,0xC0,0x60,0x60,0x60,0x60,0xE0,
1187   1              0x31,0xE0,0x1F,0x20,0x00,0x00,0x00,0x00,
1188   1      
1189   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -e-
1190   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1191   1              0x00,0x00,0x1F,0x00,0x31,0x80,0x60,0xC0,
1192   1              0x60,0xC0,0xC0,0x60,0xC0,0x60,0xFF,0xE0,
1193   1              0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x60,
1194   1              0x30,0xC0,0x1F,0x80,0x00,0x00,0x00,0x00,
1195   1      
1196   1              0x00,0x00,0x00,0x00,0x07,0xC0,0x0C,0xE0,  // -f-
1197   1              0x18,0xE0,0x18,0x40,0x18,0x00,0x18,0x00,
1198   1              0x18,0x00,0xFF,0x00,0x18,0x00,0x18,0x00,
1199   1              0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
1200   1              0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
1201   1              0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,
1202   1      
1203   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -g-
1204   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1205   1              0x00,0x00,0x3E,0x60,0x63,0xE0,0xC1,0x80,
1206   1              0xC1,0x80,0xC1,0x80,0x63,0x00,0x3E,0x00,
1207   1              0x60,0x00,0x78,0x00,0xCF,0x80,0xC1,0xC0,
1208   1              0xC0,0x60,0xC0,0x60,0x60,0xC0,0x3F,0x80,
1209   1      
1210   1              0x00,0x00,0x00,0x00,0xE0,0x00,0x60,0x00,  // -h-
1211   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1212   1              0x60,0x00,0x67,0x00,0x6D,0x80,0x78,0xC0,
1213   1              0x70,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1214   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1215   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
1216   1      
1217   1              0x00,0x00,0x00,0x00,0x06,0x00,0x0F,0x00,  // -i-
1218   1              0x0F,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
1219   1              0x00,0x00,0x1E,0x00,0x06,0x00,0x06,0x00,
1220   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1221   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1222   1              0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,
1223   1      
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 21  

1224   1              0x00,0x00,0x00,0x00,0x03,0x00,0x07,0x80,  // -j-
1225   1              0x07,0x80,0x03,0x00,0x00,0x00,0x00,0x00,
1226   1              0x00,0x00,0x07,0x80,0x01,0x80,0x01,0x80,
1227   1              0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
1228   1              0x01,0x80,0x01,0x80,0x01,0x80,0x61,0x80,
1229   1              0xF1,0x80,0xE1,0x80,0x63,0x00,0x3E,0x00,
1230   1      
1231   1              0x00,0x00,0x00,0x00,0xE0,0x00,0x60,0x00,  // -k-
1232   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1233   1              0x60,0x00,0x63,0xE0,0x61,0x80,0x63,0x00,
1234   1              0x66,0x00,0x6C,0x00,0x7E,0x00,0x76,0x00,
1235   1              0x63,0x00,0x63,0x00,0x61,0x80,0x61,0x80,
1236   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
1237   1      
1238   1              0x00,0x00,0x00,0x00,0x1E,0x00,0x06,0x00,  // -l-
1239   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1240   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1241   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1242   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1243   1              0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,
1244   1      
1245   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -m-
1246   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1247   1              0x00,0x00,0xED,0xC0,0x7F,0xE0,0x66,0x60,
1248   1              0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,
1249   1              0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,
1250   1              0x66,0x60,0xF7,0x70,0x00,0x00,0x00,0x00,
1251   1      
1252   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -n-
1253   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1254   1              0x00,0x00,0xE7,0x00,0x6D,0x80,0x78,0xC0,
1255   1              0x70,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1256   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1257   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
1258   1      
1259   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -o-
1260   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1261   1              0x00,0x00,0x1F,0x00,0x31,0x80,0x60,0xC0,
1262   1              0x60,0xC0,0xC0,0x60,0xC0,0x60,0xC0,0x60,
1263   1              0xC0,0x60,0xC0,0x60,0x60,0xC0,0x60,0xC0,
1264   1              0x31,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,
1265   1      
1266   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -p-
1267   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1268   1              0x00,0x00,0xEF,0x00,0x79,0x80,0x70,0xC0,
1269   1              0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,
1270   1              0x60,0xC0,0x70,0xC0,0x79,0x80,0x6F,0x00,
1271   1              0x60,0x00,0x60,0x00,0x60,0x00,0xF0,0x00,
1272   1      
1273   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -q-
1274   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1275   1              0x00,0x00,0x1E,0x40,0x33,0xC0,0x61,0xC0,
1276   1              0x60,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
1277   1              0x60,0xC0,0x61,0xC0,0x33,0xC0,0x1E,0xC0,
1278   1              0x00,0xC0,0x00,0xC0,0x00,0xC0,0x01,0xE0,
1279   1      
1280   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -r-
1281   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1282   1              0x00,0x00,0xE7,0x80,0x6C,0xC0,0x78,0xE0,
1283   1              0x70,0xC0,0x60,0x00,0x60,0x00,0x60,0x00,
1284   1              0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
1285   1              0x60,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 22  

1286   1      
1287   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -s-
1288   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1289   1              0x00,0x00,0x3F,0x00,0x61,0xC0,0xC0,0xC0,
1290   1              0xC0,0x40,0xE0,0x00,0x78,0x00,0x1F,0x00,
1291   1              0x03,0xC0,0x00,0xE0,0x80,0x60,0xC0,0x60,
1292   1              0xE0,0xC0,0x3F,0x80,0x00,0x00,0x00,0x00,
1293   1      
1294   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -t-
1295   1              0x08,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
1296   1              0x18,0x00,0xFF,0xC0,0x18,0x00,0x18,0x00,
1297   1              0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
1298   1              0x18,0x00,0x18,0x00,0x18,0x60,0x18,0x60,
1299   1              0x0C,0xC0,0x07,0x80,0x00,0x00,0x00,0x00,
1300   1      
1301   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -u-
1302   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1303   1              0x00,0x00,0xE1,0xC0,0x60,0xC0,0x60,0xC0,
1304   1              0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,
1305   1              0x60,0xC0,0x60,0xC0,0x61,0xC0,0x63,0xC0,
1306   1              0x36,0xC0,0x1C,0xE0,0x00,0x00,0x00,0x00,
1307   1      
1308   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -v-
1309   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1310   1              0x00,0x00,0xF1,0xE0,0x60,0xC0,0x60,0xC0,
1311   1              0x31,0x80,0x31,0x80,0x31,0x80,0x1B,0x00,
1312   1              0x1B,0x00,0x1B,0x00,0x0E,0x00,0x0E,0x00,
1313   1              0x0E,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
1314   1      
1315   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -w-
1316   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1317   1              0x00,0x00,0xF0,0xF0,0x60,0x60,0x60,0x60,
1318   1              0x66,0x60,0x66,0x60,0x36,0xC0,0x36,0xC0,
1319   1              0x36,0xC0,0x3F,0xC0,0x19,0x80,0x19,0x80,
1320   1              0x19,0x80,0x19,0x80,0x00,0x00,0x00,0x00,
1321   1      
1322   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -x-
1323   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1324   1              0x00,0x00,0xF1,0xE0,0x60,0xC0,0x60,0xC0,
1325   1              0x31,0x80,0x1B,0x00,0x0E,0x00,0x0E,0x00,
1326   1              0x0E,0x00,0x1B,0x00,0x31,0x80,0x60,0xC0,
1327   1              0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,
1328   1      
1329   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -y-
1330   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1331   1              0x00,0x00,0xF1,0xE0,0x60,0xC0,0x30,0xC0,
1332   1              0x31,0x80,0x19,0x80,0x19,0x80,0x0F,0x00,
1333   1              0x0F,0x00,0x07,0x00,0x06,0x00,0x06,0x00,
1334   1              0x06,0x00,0xCC,0x00,0xCC,0x00,0x78,0x00,
1335   1      
1336   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -z-
1337   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1338   1              0x00,0x00,0x7F,0xE0,0x40,0x60,0x40,0xC0,
1339   1              0x01,0x80,0x03,0x00,0x06,0x00,0x0C,0x00,
1340   1              0x18,0x00,0x30,0x00,0x60,0x20,0xC0,0x20,
1341   1              0xC0,0x60,0xFF,0xE0,0x00,0x00,0x00,0x00,
1342   1      
1343   1              0x01,0xE0,0x03,0x00,0x06,0x00,0x06,0x00,  // -{-
1344   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1345   1              0x06,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,
1346   1              0x18,0x00,0x0C,0x00,0x06,0x00,0x06,0x00,
1347   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 23  

1348   1              0x06,0x00,0x06,0x00,0x03,0x00,0x01,0xE0,
1349   1      
1350   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,  // -|-
1351   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1352   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1353   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1354   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1355   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1356   1      
1357   1              0x78,0x00,0x0C,0x00,0x06,0x00,0x06,0x00,  // -}-
1358   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1359   1              0x06,0x00,0x06,0x00,0x03,0x00,0x01,0x80,
1360   1              0x01,0x80,0x03,0x00,0x06,0x00,0x06,0x00,
1361   1              0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
1362   1              0x06,0x00,0x06,0x00,0x0C,0x00,0x78,0x00,
1363   1      
1364   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // -~-
1365   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1366   1              0x00,0x00,0x00,0x00,0x38,0x00,0x6C,0x30,
1367   1              0xC3,0x60,0x01,0xC0,0x00,0x00,0x00,0x00,
1368   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
1369   1              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
1370   1      };
1371   1      
1372   1              unsigned int i;
1373   1              unsigned int maxnum=strlen(string);
1374   1              unsigned int num;
1375   1              unsigned char m,n;
1376   1              unsigned char x_l=2;
1377   1              unsigned char y_l=24;
1378   1              unsigned char b=y;
1379   1              unsigned char a=x;
1380   1              if(degree==0){
1381   2                      for(i=0;i<maxnum;i++){
1382   3                              x=a+(12+space)*i;
1383   3                              y=b;
1384   3                              num=(string[i]-32)*48;
1385   3                              //
1386   3                              m=0;
1387   3                              n=0;
1388   3                              while(n<y_l){
1389   4                                      n++;
1390   4                                      while(m<x_l){
1391   5                                              m++;
1392   5                                              draw_8bits(x,y,ASCII1224[num]);
1393   5                                              num++;
1394   5                                              x+=8;
1395   5      
1396   5                                      }
1397   4                                      x-=8*m;
1398   4                                      m=0;
1399   4                                      y++;
1400   4                              }
1401   3                      }
1402   2              }
1403   1              else if(degree==90){
1404   2                      for(i=0;i<maxnum;i++){
1405   3                              x=a;
1406   3                              y=b+(12+space)*i;
1407   3                              num=(string[i]-32)*48;
1408   3                              //
1409   3                              m=0;
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 24  

1410   3                              n=0;
1411   3                              while(n<y_l){
1412   4                                      n++;
1413   4                                      while(m<x_l){
1414   5                                              m++;
1415   5                                              draw_8bits90(x,y,ASCII1224[num]);
1416   5                                              num++;
1417   5                                              y+=8;
1418   5      
1419   5                                      }
1420   4                                      y-=8*m;
1421   4                                      m=0;
1422   4                                      x--;
1423   4                              }
1424   3                      }
1425   2              }else if(degree==180){
1426   2                      for(i=0;i<maxnum;i++){
1427   3                              x=a-(12+space)*i;
1428   3                              y=b;
1429   3                              num=(string[i]-32)*48;
1430   3                              //
1431   3                              m=0;
1432   3                              n=0;
1433   3                              while(n<y_l){
1434   4                                      n++;
1435   4                                      while(m<x_l){
1436   5                                              m++;
1437   5                                              draw_8bits180(x,y,ASCII1224[num]);
1438   5                                              num++;
1439   5                                              x-=8;
1440   5      
1441   5                                      }
1442   4                                      x+=8*m;
1443   4                                      m=0;
1444   4                                      y--;
1445   4                              }
1446   3                      }
1447   2              }else if(degree==270){
1448   2                      for(i=0;i<maxnum;i++){
1449   3                              x=a;
1450   3                              y=b-(12+space)*i;
1451   3                              num=(string[i]-32)*48;
1452   3                              //
1453   3                              m=0;
1454   3                              n=0;
1455   3                              while(n<y_l){
1456   4                                      n++;
1457   4                                      while(m<x_l){
1458   5                                              m++;
1459   5                                              draw_8bits270(x,y,ASCII1224[num]);
1460   5                                              num++;
1461   5                                              y-=8;
1462   5      
1463   5                                      }
1464   4                                      y+=8*m;
1465   4                                      m=0;
1466   4                                      x++;
1467   4                              }
1468   3                      }
1469   2              }
1470   1      }
1471          
C51 COMPILER V8.02   GLCD                                                                  10/27/2013 10:17:37 PAGE 25  

1472          void delayms(unsigned int timedelay){
1473   1              unsigned int s,j;
1474   1              unsigned char i;
1475   1              for(s=0;s<timedelay;s++){
1476   2                      for(i=0;i<2;i++){
1477   3                      for(j=0;j<124;j++){;}
1478   3              }
1479   2              }
1480   1      }
1481          
1482          
1483          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3064    ----
   CONSTANT SIZE    =   5320    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     117
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       8
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
